#!/usr/bin/env bash

contains () {
    local e
    for e in "${@:2}"; do [[ $e == $1 ]] && return 0; done
    return 1
}

if contains -k "${@}"; then
    kill=true
fi

if contains -s "${@}"; then
    start=true
    if [[ $EUID != 0 ]]; then
        sudo $0 "$@"
        exit $?
    fi
fi

port=10241                  # Local port on which to set up the proxy service.
host=hydra                  # Remote machine (through which the connection is bounced).
user=will                   # User on remote machine (blank for default).
device=Wi-Fi

stub="ssh -fC2qTN -D"
target=$host
if [[ -n $user ]]; then
    target=$user@$host
fi

# Get PID of existing tunnels.
function get_pid {
    ps=ps
    if hash procps 2> /dev/null; then
        # We're on Windows, so use procps (ps won't give arguments).
        ps=procps
    fi
    $ps x | grep "$stub" | grep -v grep | awk '{ print $1 }'
}

if [[ $kill ]]; then
    # Kill the proxy.

    if [[ $start ]] && [[ $EUID == 0 ]]; then
        # Disable SOCKS proxy (for Mac).
        if hash networksetup 2> /dev/null; then
            echo "Disabling SOCKS proxy..."
            sudo networksetup -setsocksfirewallproxystate $device off
            if [[ $? == 0 ]]; then
                echo "...done."
            else
                echo "...failed."
            fi
        fi
    fi

    # Is there already a tunnel?
    pid=$(get_pid)
    if [[ -n $pid ]]; then
        echo "Killing proxy with PID: $pid."
        kill $pid
    else
        echo "No proxy exists."
    fi
else
    # Set up the proxy.

    # Is there already a tunnel?
    if [[ -z $(get_pid) ]]; then
        echo "Starting proxy on port $port to $target."
    else
        $0 -k > /dev/null
        echo "Renewing proxy."
    fi

    eval $stub $port "-o 'ControlPath none'" $target
    result=$?
    if [[ $result != 0 ]]; then
        echo "Couldn't start proxy."
        exit $result
    fi
    echo "Proxy started with PID: $(get_pid)."

    if [[ $start ]] && [[ $EUID == 0 ]]; then
        # Enable SOCKS proxy (for Mac).
        if hash networksetup 2> /dev/null; then
            echo "Enabling SOCKS proxy..."
            sudo networksetup -setsocksfirewallproxy $device localhost $port
            sudo networksetup -setsocksfirewallproxystate $device on
            if [[ $? == 0 ]]; then
                echo "...done."
            else
                echo "...failed."
            fi
        fi
    fi
fi
